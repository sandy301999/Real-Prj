---
- name: Webserver setup
  hosts: webserver
  become: yes
  gather_facts: yes

  vars:
    app_service: myapp
    app_url: "http://localhost:8080/health"
    src_d: ../docker
    dest_d: /opt/docker/
    packages:
      - vim
      - git
      - curl
      - nginx
      - sshd
    services:
      - sshd
      - nginx
      - docker

  tasks:
    - name: Install required packages
      package:
        name: "{{ item }}"
        state: present
      loop: "{{ packages }}"

    - name: Start and enable required services
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop: "{{ services }}"

    - name: Copy Docker configuration files
      ansible.builtin.copy:
        src: "{{ src_d }}"
        dest: "{{ dest_d }}"
        owner: root
        group: root
        mode: '0755'

    - name: Archive log files
      archive:
        path: /ibus/fetalink
        dest: /ibus/logs/fetalink_bkup.tar.gz
        format: gz

    - name: Disable root SSH login (OS hardening)
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: 'PermitRootLogin no'
      notify: restart ssh

  handlers:
    - name: restart ssh
      service:
        name: sshd
        state: restarted


# Second play â€“ Rolling updates and maintenance
- name: Rolling updates
  hosts: all
  become: yes
  serial: 1

  tasks:
    - name: Restart SSH service
      service:
        name: sshd
        state: restarted

    - name: Run custom health script
      command: bash /ibus/healthcheck.sh

    - name: Run system updates (apt/yum)
      package:
        name: "*"
        state: latest

    - name: Print OS name
      debug:
        var: ansible_distribution

    - name: Start and enable NTP service on CentOS
      systemd:
        name: chronyd
        state: started
        enabled: yes
      when: ansible_distribution == "CentOS"

    - name: Create log rotation script
      copy:
        dest: /usr/local/bin/log_cleanup.sh
        mode: '0755'
        content: |
          #!/bin/bash
          LOG_DIR="/var/log/myapp"
          find $LOG_DIR -type f -name "*.log" -mtime +7 -exec gzip {} \;
          find $LOG_DIR -type f -name "*.gz" -mtime +30 -delete

    - name: Schedule cron job for log cleanup
      cron:
        name: "Daily log rotation and cleanup"
        user: root
        job: "/usr/local/bin/log_cleanup.sh > /var/log/log_cleanup.log 2>&1"
        minute: 0
        hour: 2
        state: present

    - name: Check application health endpoint
      uri:
        url: "{{ app_url }}"
        status_code: 200
        return_content: no
      register: app_health
      ignore_errors: yes

    - name: Restart application if health check failed
      when: app_health.status != 200
      service:
        name: "{{ app_service }}"
        state: restarted

    - name: Confirm application health after restart
      uri:
        url: "{{ app_url }}"
        status_code: 200
      register: verify_health
      retries: 5
      delay: 10
      until: verify_health.status == 200

    - name: Display application status
      debug:
        msg: "Application health check status: {{ verify_health.status }}"
